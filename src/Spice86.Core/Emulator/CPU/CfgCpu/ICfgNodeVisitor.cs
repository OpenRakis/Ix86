namespace Spice86.Core.Emulator.CPU.CfgCpu;

using Spice86.Core.Emulator.CPU.CfgCpu.ControlFlowGraph;
using Spice86.Core.Emulator.CPU.CfgCpu.ParsedInstruction.Instructions;
using Spice86.Core.Emulator.CPU.CfgCpu.ParsedInstruction.Instructions.AddRegRm;
using Spice86.Core.Emulator.CPU.CfgCpu.ParsedInstruction.Instructions.AddRmReg;
using Spice86.Core.Emulator.CPU.CfgCpu.ParsedInstruction.Instructions.Grp1;
using Spice86.Core.Emulator.CPU.CfgCpu.ParsedInstruction.Instructions.JmpNearImm;
using Spice86.Core.Emulator.CPU.CfgCpu.ParsedInstruction.Instructions.MovMoffsAcc;
using Spice86.Core.Emulator.CPU.CfgCpu.ParsedInstruction.Instructions.MovRegImm;
using Spice86.Core.Emulator.CPU.CfgCpu.ParsedInstruction.Instructions.MovRmImm;
using Spice86.Core.Emulator.CPU.CfgCpu.ParsedInstruction.Instructions.MovRmReg;
using Spice86.Core.Emulator.CPU.CfgCpu.ParsedInstruction.Instructions.PushPop;
using Spice86.Core.Emulator.CPU.CfgCpu.ParsedInstruction.SelfModifying;

public interface ICfgNodeVisitor {
    public ICfgNode? NextNode { get; }
    public void Accept(AddRmReg8 instruction);
    public void Accept(AddRmReg16 instruction);
    public void Accept(AddRmReg32 instruction);
    public void Accept(AddRegRm8 instruction);
    public void Accept(AddRegRm16 instruction);
    public void Accept(AddRegRm32 instruction);
    public void Accept(AddAccImm8 instruction);
    public void Accept(AddAccImm16 instruction);
    public void Accept(AddAccImm32 instruction);
    public void Accept(Grp1Adc8  instruction);
    public void Accept(Grp1AdcSigned16  instruction);
    public void Accept(Grp1AdcSigned32  instruction);
    public void Accept(Grp1AdcUnsigned16  instruction);
    public void Accept(Grp1AdcUnsigned32  instruction);
    public void Accept(Grp1Add8  instruction);
    public void Accept(Grp1AddSigned16  instruction);
    public void Accept(Grp1AddSigned32  instruction);
    public void Accept(Grp1AddUnsigned16  instruction);
    public void Accept(Grp1AddUnsigned32  instruction);
    public void Accept(Grp1And8  instruction);
    public void Accept(Grp1AndSigned16  instruction);
    public void Accept(Grp1AndSigned32  instruction);
    public void Accept(Grp1AndUnsigned16  instruction);
    public void Accept(Grp1AndUnsigned32  instruction);
    public void Accept(Grp1Cmp8  instruction);
    public void Accept(Grp1CmpSigned16  instruction);
    public void Accept(Grp1CmpSigned32  instruction);
    public void Accept(Grp1CmpUnsigned16  instruction);
    public void Accept(Grp1CmpUnsigned32  instruction);
    public void Accept(Grp1Or8  instruction);
    public void Accept(Grp1OrSigned16  instruction);
    public void Accept(Grp1OrSigned32  instruction);
    public void Accept(Grp1OrUnsigned16  instruction);
    public void Accept(Grp1OrUnsigned32  instruction);
    public void Accept(Grp1Sbb8  instruction);
    public void Accept(Grp1SbbSigned16  instruction);
    public void Accept(Grp1SbbSigned32  instruction);
    public void Accept(Grp1SbbUnsigned16  instruction);
    public void Accept(Grp1SbbUnsigned32  instruction);
    public void Accept(Grp1Sub8  instruction);
    public void Accept(Grp1SubSigned16  instruction);
    public void Accept(Grp1SubSigned32  instruction);
    public void Accept(Grp1SubUnsigned16  instruction);
    public void Accept(Grp1SubUnsigned32  instruction);
    public void Accept(Grp1Xor8  instruction);
    public void Accept(Grp1XorSigned16  instruction);
    public void Accept(Grp1XorSigned32  instruction);
    public void Accept(Grp1XorUnsigned16  instruction);
    public void Accept(Grp1XorUnsigned32  instruction);
    public void Accept(MovRmReg8 instruction);
    public void Accept(MovRmReg16 instruction);
    public void Accept(MovRmReg32 instruction);
    public void Accept(Pushf16 instruction);
    public void Accept(Pushf32 instruction);
    public void Accept(Popf16 instruction);
    public void Accept(Popf32 instruction);
    public void Accept(MovMoffsAcc8 instruction);
    public void Accept(MovMoffsAcc16 instruction);
    public void Accept(MovMoffsAcc32 instruction);
    public void Accept(MovRegImm8 instruction);
    public void Accept(MovRegImm16 instruction);
    public void Accept(MovRegImm32 instruction);
    public void Accept(MovRmImm8 instruction);
    public void Accept(MovRmImm16 instruction);
    public void Accept(MovRmImm32 instruction);
    public void Accept(JmpNearImm16 instruction);
    public void Accept(JmpNearImm8 instruction);
    public void Accept(Hlt instruction);
    public void Accept(DiscriminatedNode discriminatedNode);
}